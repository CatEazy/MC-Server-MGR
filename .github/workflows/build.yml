name: Build Executable

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            output: 'mc-server-manager.exe'
            name: 'windows'
          - os: ubuntu-latest  
            output: 'mc-server-manager'
            name: 'linux'
          - os: macos-latest
            output: 'mc-server-manager'
            name: 'macos'
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Nuitka
      run: |
        python -m pip install --upgrade pip
        pip install nuitka ordered-set
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y patchelf
    
    - name: Build executable
      run: |
        python -m nuitka \
          --standalone \
          --onefile \
          --output-filename=${{ matrix.output }} \
          --enable-plugin=no-qt \
          --assume-yes-for-downloads \
          --output-dir=dist \
          start.py
    
    - name: Test executable
      run: |
        if [ -f "dist/${{ matrix.output }}" ]; then
          echo "✓ Build successful"
          ls -lh "dist/${{ matrix.output }}"
          chmod +x "dist/${{ matrix.output }}" 2>/dev/null || true
        else
          echo "✗ Build failed"
          exit 1
        fi
      shell: bash
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: mc-server-manager-${{ matrix.name }}
        path: dist/${{ matrix.output }}
        retention-days: 30
    
    - name: Prepare release asset
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        mkdir -p release
        cp "dist/${{ matrix.output }}" "release/mc-server-manager-${{ matrix.name }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}"
      shell: bash
    
    - name: Upload release asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v3
      with:
        name: release-assets
        path: release/
        retention-days: 90

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download release assets
      uses: actions/download-artifact@v3
      with:
        name: release-assets
        path: release-assets/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}