name: Build Executable with Nuitka

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          # 只构建主要平台和Python版本组合
          - os: windows-latest
            python-version: '3.10'
            output-name: 'mc-server-manager.exe'
            artifact-name: 'windows'
          - os: ubuntu-latest  
            python-version: '3.10'
            output-name: 'mc-server-manager'
            artifact-name: 'linux'
          - os: macos-latest
            python-version: '3.10' 
            output-name: 'mc-server-manager'
            artifact-name: 'macos'
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka ordered-set
    
    - name: Install platform-specific dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Windows可能需要Visual Studio Build Tools
        echo "Windows build environment ready"
    
    - name: Install platform-specific dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ccache patchelf
    
    - name: Install platform-specific dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ccache
    
    - name: Test Python version
      run: |
        python --version
        python -c "from mc_server_manager import MinecraftServerManager; print('Import test successful')"
    
    - name: Build with Nuitka
      run: |
        python -m nuitka --standalone --onefile --output-filename=${{ matrix.output-name }} --enable-plugin=no-qt --assume-yes-for-downloads --output-dir=dist start.py
    
    - name: Test executable
      run: |
        echo "Testing executable..."
        if [ -f "dist/${{ matrix.output-name }}" ]; then
          echo "✓ Executable created successfully"
          ls -lh "dist/${{ matrix.output-name }}"
          chmod +x "dist/${{ matrix.output-name }}" 2>/dev/null || true
        else
          echo "✗ Executable not found"
          exit 1
        fi
      shell: bash
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mc-server-manager-${{ matrix.artifact-name }}
        path: |
          dist/${{ matrix.output-name }}
        retention-days: 30
    
    - name: Create release assets (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        mkdir -p release
        cp "dist/${{ matrix.output-name }}" "release/mc-server-manager-${{ matrix.artifact-name }}${{ runner.os == 'Windows' && '.exe' || '' }}"
      shell: bash
    
    - name: Upload release assets
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v3
      with:
        name: release-assets
        path: release/
        retention-days: 90

  # 如果单文件构建失败，尝试多文件模式
  build-fallback:
    if: failure()
    needs: build
    strategy:
      matrix:
        include:
          - os: windows-latest
            python-version: '3.10'
            artifact-name: 'windows-standalone'
          - os: ubuntu-latest  
            python-version: '3.10'
            artifact-name: 'linux-standalone'
          - os: macos-latest
            python-version: '3.10' 
            artifact-name: 'macos-standalone'
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka ordered-set
    
    - name: Build with Nuitka (Standalone mode)
      run: |
        python -m nuitka --standalone --output-filename=mc-server-manager --enable-plugin=no-qt --assume-yes-for-downloads --output-dir=dist-standalone start.py
    
    - name: Package standalone build
      run: |
        cd dist-standalone/start.dist
        if [ "$RUNNER_OS" = "Windows" ]; then
          7z a ../../mc-server-manager-${{ matrix.artifact-name }}.zip *
        else
          tar -czf ../../mc-server-manager-${{ matrix.artifact-name }}.tar.gz *
        fi
      shell: bash
    
    - name: Upload standalone artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mc-server-manager-${{ matrix.artifact-name }}
        path: |
          mc-server-manager-${{ matrix.artifact-name }}.*
        retention-days: 30

  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-assets
        path: release-assets/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}