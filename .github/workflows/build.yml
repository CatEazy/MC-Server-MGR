name: Build Executable

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install nuitka ordered-set
    
    - name: Build executable
      run: |
        python -m nuitka --standalone --onefile --output-filename=mc-server-manager.exe --enable-plugin=pyside2,pyside6,pyqt5,pyqt6 --assume-yes-for-downloads --output-dir=dist start.py
    
    - name: Test executable
      run: |
        if (Test-Path "dist/mc-server-manager.exe") {
          echo "✓ Build successful"
          Get-Item "dist/mc-server-manager.exe" | Select-Object Name, Length
        } else {
          echo "✗ Build failed"
          exit 1
        }
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: mc-server-manager-windows
        path: dist/mc-server-manager.exe
        retention-days: 30
    
    - name: Prepare release asset
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        mkdir release
        copy "dist/mc-server-manager.exe" "release/mc-server-manager-windows.exe"
    
    - name: Upload release asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: release/
        retention-days: 90

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download release assets
      uses: actions/download-artifact@v4
      with:
        name: release-assets
        path: release-assets/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}