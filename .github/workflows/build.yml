name: Build Minecraft Server Manager

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libegl1-mesa libxrandr2 libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
        
    - name: Test import
      run: |
        python -c "import PyQt5; print('PyQt5 OK')"
        python -c "import qfluentwidgets; print('qfluentwidgets OK')"
        python -c "from mc_server_manager import MinecraftServerManager; print('mc_server_manager OK')"
        
    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller MinecraftServerManager.spec
        
    - name: Build with PyInstaller (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        export QT_QPA_PLATFORM=offscreen
        pyinstaller MinecraftServerManager.spec
        
    - name: Build with PyInstaller (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        pyinstaller MinecraftServerManager.spec
        
    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: MinecraftServerManager-Windows-Python${{ matrix.python-version }}
        path: dist/MinecraftServerManager.exe
        
    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: MinecraftServerManager-Linux-Python${{ matrix.python-version }}
        path: dist/MinecraftServerManager
        
    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v3
      with:
        name: MinecraftServerManager-macOS-Python${{ matrix.python-version }}
        path: dist/MinecraftServerManager
        
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          MinecraftServerManager-Windows-Python3.11/MinecraftServerManager.exe
          MinecraftServerManager-Linux-Python3.11/MinecraftServerManager
          MinecraftServerManager-macOS-Python3.11/MinecraftServerManager
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}